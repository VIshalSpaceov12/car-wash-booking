// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CAR_OWNER
  SHOP_OWNER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          UserRole  @default(CAR_OWNER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  carOwner      CarOwner?
  shopOwner     ShopOwner?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model CarOwner {
  id        String   @id @default(cuid())
  userId    String   @unique
  address   String?
  city      String?
  state     String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicles Vehicle[]
  bookings Booking[]
  reviews  Review[]

  @@map("car_owners")
}

model ShopOwner {
  id          String   @id @default(cuid())
  userId      String   @unique
  businessName String
  description String?
  address     String
  city        String
  state       String
  zipCode     String
  phone       String
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  services Service[]
  bookings Booking[]
  reviews  Review[]

  @@map("shop_owners")
}

model Vehicle {
  id         String   @id @default(cuid())
  carOwnerId String
  make       String
  model      String
  year       Int
  color      String?
  plateNumber String? @unique
  vehicleType String // car, bike, truck, etc.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  carOwner CarOwner  @relation(fields: [carOwnerId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("vehicles")
}

model Service {
  id          String   @id @default(cuid())
  shopOwnerId String
  name        String
  description String?
  price       Float
  duration    Int // in minutes
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  shopOwner ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  bookings  Booking[]

  @@map("services")
}

model Booking {
  id            String        @id @default(cuid())
  carOwnerId    String
  shopOwnerId   String
  serviceId     String
  vehicleId     String
  scheduledAt   DateTime
  completedAt   DateTime?
  status        BookingStatus @default(PENDING)
  totalAmount   Float
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  carOwner  CarOwner  @relation(fields: [carOwnerId], references: [id], onDelete: Cascade)
  shopOwner ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  service   Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  vehicle   Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  payment   Payment?
  review    Review?

  @@map("bookings")
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String        @unique
  amount          Float
  currency        String        @default("INR")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?
  transactionId   String?       @unique
  paymentGateway  String? // razorpay, stripe, etc.
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id          String   @id @default(cuid())
  bookingId   String   @unique
  carOwnerId  String
  shopOwnerId String
  rating      Int // 1-5
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  booking   Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  carOwner  CarOwner  @relation(fields: [carOwnerId], references: [id], onDelete: Cascade)
  shopOwner ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)

  @@map("reviews")
}